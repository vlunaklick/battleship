{"version":3,"sources":["components/Header/index.js","factories /shipFactory.js","factories /boardFactory.js","factories /playerFactory.js","components/BoxInBoard/index.js","components/BoardDisplay/index.js","components/TextTopP/TextTopP.js","components/BoardGenerator/index.js","App.js","reportWebVitals.js","index.js"],"names":["HeadeR","className","createShip","name","longitud","vertical","start","lives","inicio","nombre","hit","pos","ori","long","longD","isSunk","valC","sunk","i","length","darLives","valor","push","createGameboard","checkPos","tablero","coords","direc","testeo","posible","checkeo","limiteT","Math","floor","hasShip","init","isHit","placeShip","naves","resultado","navesRes","newC","receiveAttack","sunked","hitted","createPlayer","board","fireShip","opoBoard","devuelta","BoxInBoard","props","especial","ship","enemy","clase","onClick","atacar","turno","mandarAtaque","id","ponerShip","BoardDisplay","cajas","map","item","uniqid","select","TextTopP","placing","BoardGenerator","showAll","turnoMostrar","hiten","player1","player2","resetear","espacios","randomP","cambiarOri","orientacion","iniciar","App","useState","showBoth","changeShow","changeTurno","changeOrientacion","changeEspacios","shipsLP","changeShipsLP","shipsLIA","changeShipsLIA","ganador","changeGanador","turnoParaMostrar","changeTurnoPaMos","hited","changeHited","iaplayer","tableroPlayer","changeTableroP","tableroIA","changeTableroIA","Carrier","Battleship","Submarine","Patroler","Peque","navesPlayer","changeNavesP","navesIA","changeNavesIA","randomMoves","player","cambioRandom","change","navesS","numero","coordenadas","random","direccion","updateTP","resetP","cambiarTurno","prevState","ataqueHumano","ataque1","ataqueIA","ataque2","setTimeout","coord","hayGanador","puntosP","puntosIA","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb9988e6.chunk.js","sourcesContent":["import './style.css'\n\nexport default function HeadeR() {\n    return (\n        <header className='headerCont'>\n            <h1 className='titHead'>Battleship</h1>\n        </header>\n    )\n}\n","const createShip = (name, longitud, vertical, start) => {\n    let lives = []\n    let inicio = start\n    let nombre = name\n\n    const darLives = valor => {\n        for (let i = 0; i < valor; i++) {\n            lives.push('')\n        }\n    }\n\n    const hit = (pos, ori, long) => {\n        let longD = [...long]\n        if (ori === 'vertical') {\n            longD[(pos - inicio) / 10] = 'X'\n        } else {\n            longD[pos - inicio] = 'X'\n        }\n        return longD\n    }\n\n    const isSunk = long => {\n        let valC = long\n        let sunk = true\n        for (let i = 0; i < long.length; i++) {\n            if (valC[i] !== 'X') {\n                sunk = false\n                break\n            }\n        }\n        return sunk\n    }\n\n    return { nombre, vertical, hit, isSunk, lives, darLives }\n}\n\nexport default createShip\n","import createShip from './shipFactory'\n\nconst createGameboard = () => {\n    const init = () => {\n        let tablero = []\n        for (let i = 0; i < 100; i++) {\n            tablero.push({ hasShip: false, isHit: false, name: '' })\n        }\n        return tablero\n    }\n\n    const receiveAttack = (naves, tablero, coords) => {\n        let valor = { ...naves }\n        let sunked\n        let hitted = false\n        if (tablero[coords - 1].isHit === false) {\n            tablero[coords - 1].isHit = true\n            if (tablero[coords - 1].hasShip === true) {\n                valor[tablero[coords - 1].name].lives = valor[\n                    tablero[coords - 1].name\n                ].hit(\n                    coords - 1,\n                    valor[tablero[coords - 1].name].vertical,\n                    valor[tablero[coords - 1].name].lives\n                )\n                sunked = valor[tablero[coords - 1].name].isSunk(\n                    valor[tablero[coords - 1].name].lives\n                )\n                hitted = true\n            }\n        }\n\n        return [valor, sunked, hitted]\n    }\n\n    const placeShip = (tablero, coords, longitud, direc, nombre, naves) => {\n        let resultado = [...tablero]\n        let navesRes = { ...naves }\n        if (checkPos(resultado, coords - 1, longitud, direc)) {\n            navesRes[`${nombre}`] = createShip(\n                nombre,\n                longitud,\n                direc,\n                coords - 1\n            )\n            navesRes[`${nombre}`].darLives(longitud)\n            let newC = coords - 1\n            if (direc === 'vertical') {\n                for (let i = 0; i < longitud; i++) {\n                    resultado[newC].hasShip = true\n                    resultado[newC].name = nombre\n                    newC += 10\n                }\n            } else {\n                for (let i = 0; i < longitud; i++) {\n                    resultado[newC].hasShip = true\n                    resultado[newC].name = nombre\n                    newC += 1\n                }\n            }\n        }\n        return [resultado, navesRes]\n    }\n\n    const checkPos = (tablero, coords, longitud, direc) => {\n        let testeo = [...tablero]\n        let posible = true\n        let checkeo = coords\n        let limiteT = Math.floor((coords + 10) / 10) * 10 - 1\n        if (direc === 'vertical') {\n            for (let i = 0; i < longitud; i++) {\n                if (checkeo <= 99 && testeo[checkeo].hasShip === false) {\n                    checkeo += 10\n                } else {\n                    posible = false\n                }\n            }\n        } else {\n            for (let i = 0; i < longitud; i++) {\n                if (\n                    checkeo <= 99 &&\n                    testeo[checkeo].hasShip === false &&\n                    checkeo <= limiteT\n                ) {\n                    checkeo += 1\n                } else {\n                    posible = false\n                }\n            }\n        }\n        return posible\n    }\n\n    return { init, checkPos, placeShip, receiveAttack }\n}\n\nexport default createGameboard\n","import createGameboard from './boardFactory'\n\nconst createPlayer = name => {\n    let board = createGameboard()\n    const fireShip = (naves, opoBoard, coords) => {\n        let devuelta\n        if (opoBoard[coords - 1].isHit === false) {\n            devuelta = board.receiveAttack(naves, opoBoard, coords)\n        }\n        return devuelta\n    }\n\n    return { name, fireShip, board }\n}\n\nexport default createPlayer\n","import './style.css'\n\nexport default function BoxInBoard(props) {\n    let especial =\n        !props.ship && !props.hit\n            ? 'water'\n            : props.ship && props.hit\n            ? 'hitS'\n            : props.ship && props.enemy && !props.hit\n            ? 'water'\n            : props.ship && !props.enemy && !props.hit\n            ? 'ship'\n            : 'hitN'\n\n    let clase = `boxinboard ${especial}`\n\n    const enviarAtaque = () => {\n        if (props.atacar === 'atacar') {\n            if (props.turno === 'player' && !props.hit)\n                props.mandarAtaque(props.id)\n        } else if (props.atacar === 'poner') {\n            props.ponerShip(props.id)\n        }\n    }\n\n    return <div onClick={() => enviarAtaque()} className={clase}></div>\n}\n","import './style.css'\nimport BoxInBoard from '../BoxInBoard/index'\nimport uniqid from 'uniqid'\n\nfunction BoardDisplay(props) {\n    let id = 0\n    let cajas = props.board.map(function (item) {\n        id += 1\n        return (\n            <BoxInBoard\n                key={uniqid()}\n                id={id}\n                enemy={props.enemy}\n                ship={item.hasShip}\n                hit={item.isHit}\n                turno={props.turno}\n                atacar={props.atacar}\n                mandarAtaque={props.mandarAtaque}\n                ponerShip={props.ponerShip}\n            />\n        )\n    })\n    return (\n        <div className='agruparBoard'>\n            <div className='userBoard'>{cajas}</div>\n            {props.select === 'IA' || props.select === 'Your' ? (\n                <div className='textB'>\n                    <h3 className='tB'>{props.select} Board</h3>\n                </div>\n            ) : (\n                ''\n            )}\n        </div>\n    )\n}\n\nexport default BoardDisplay\n","import React from 'react'\nimport './style.css'\n\nexport default function TextTopP(props) {\n    let valor = props.placing !== 1 ? props.placing : 2\n    let nombre =\n        valor === 5\n            ? 'Carrier'\n            : valor === 4\n            ? 'Battleship'\n            : valor === 3\n            ? 'Submarine'\n            : valor === 2\n            ? 'Patroler'\n            : 'Peque'\n    return (\n        <div className='titlePlace'>\n            <h1 className='titPlace'>\n                {props.placing !== 0\n                    ? `You have to place a ${nombre} (${valor} places)`\n                    : 'You can start the game now'}\n            </h1>\n        </div>\n    )\n}\n","import React from 'react'\nimport BoardDisplay from '../BoardDisplay'\nimport TextTopP from '../TextTopP/TextTopP'\nimport './style.css'\n\nexport default function BoardGenerator(props) {\n    return (\n        <div className='boardsCont'>\n            {props.showAll ? (\n                <div className='containerALL'>\n                    <div className='textingGame'>\n                        {props.turnoMostrar === 0 ? (\n                            <div>\n                                <h2 className='textW'>Your turn</h2>\n                            </div>\n                        ) : (\n                            <div>\n                                <h2 className='textW'>\n                                    {props.turno === 'player' ? 'IA ' : 'You '}\n                                    shot and hit {props.hiten}.\n                                </h2>\n                            </div>\n                        )}\n                    </div>\n                    <div className='containerWP'>\n                        <BoardDisplay\n                            enemy={false}\n                            board={props.player1}\n                            atacar={'nada'}\n                            mandarAtaque={props.mandarAtaque}\n                            ponerShip={props.ponerShip}\n                            select='Your'\n                        />\n                        <BoardDisplay\n                            enemy={true}\n                            board={props.player2}\n                            turno={props.turno}\n                            atacar={'atacar'}\n                            mandarAtaque={props.mandarAtaque}\n                            ponerShip={props.ponerShip}\n                            select='IA'\n                        />\n                    </div>\n                    <button className='botonP' onClick={() => props.resetear()}>\n                        Play Again\n                    </button>\n                </div>\n            ) : (\n                <div className='containerWP'>\n                    <div className='placed'>\n                        <TextTopP placing={props.espacios} />\n                        <div className='boardP'>\n                            <BoardDisplay\n                                enemy={false}\n                                board={props.player1}\n                                atacar={'poner'}\n                                ponerShip={props.ponerShip}\n                                mandarAtaque={props.mandarAtaque}\n                            />\n                            <div className='botonesT'>\n                                <button\n                                    className='botonP'\n                                    onClick={() => props.randomP()}>\n                                    Random\n                                </button>\n                                <button\n                                    className='botonP'\n                                    onClick={() => props.cambiarOri()}>\n                                    {props.orientacion}\n                                </button>\n                                <button\n                                    className='botonP'\n                                    onClick={() => props.resetear()}>\n                                    Reset\n                                </button>\n                            </div>\n                            <button\n                                className='botonP'\n                                onClick={() => props.iniciar()}>\n                                Accept\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    )\n}\n","import HeadeR from './components/Header'\nimport createPlayer from './factories /playerFactory'\nimport './app.css'\nimport { useState } from 'react'\nimport BoardGenerator from './components/BoardGenerator'\n\nfunction App() {\n    let [showBoth, changeShow] = useState(false)\n    let [turno, changeTurno] = useState('player')\n    let [orientacion, changeOrientacion] = useState('vertical')\n    let [espacios, changeEspacios] = useState(5)\n    let [shipsLP, changeShipsLP] = useState(5)\n    let [shipsLIA, changeShipsLIA] = useState(5)\n    let [ganador, changeGanador] = useState(false)\n    let [turnoParaMostrar, changeTurnoPaMos] = useState(0)\n    let [hited, changeHited] = useState('water')\n\n    let player1 = createPlayer('Valen')\n    let iaplayer = createPlayer('IA')\n\n    let [tableroPlayer, changeTableroP] = useState(player1.board.init)\n    let [tableroIA, changeTableroIA] = useState(iaplayer.board.init)\n\n    let [navesPlayer, changeNavesP] = useState({\n        Carrier: {},\n        Battleship: {},\n        Submarine: {},\n        Patroler: {},\n        Peque: {},\n    })\n    let [navesIA, changeNavesIA] = useState({\n        Carrier: {},\n        Battleship: {},\n        Submarine: {},\n        Patroler: {},\n        Peque: {},\n    })\n\n    const randomMoves = player => {\n        let change = player.board.init()\n        let cambioRandom\n        let navesS = player.name === 'Valen' ? navesPlayer : navesIA\n        for (let i = 5; i > 0; i--) {\n            let nombre =\n                i === 5\n                    ? 'Carrier'\n                    : i === 4\n                    ? 'Battleship'\n                    : i === 3\n                    ? 'Submarine'\n                    : i === 2\n                    ? 'Patroler'\n                    : 'Peque'\n            let numero = i !== 1 ? i : 2\n            let coordenadas = Math.floor(Math.random() * 100) + 1\n            let direccion = Math.random() < 0.5 ? 'vertical' : 'horizontal'\n            while (\n                !player.board.checkPos(\n                    change,\n                    coordenadas - 1,\n                    numero,\n                    direccion\n                )\n            ) {\n                coordenadas = Math.floor(Math.random() * 100) + 1\n            }\n            cambioRandom = player.board.placeShip(\n                change,\n                coordenadas,\n                numero,\n                direccion,\n                nombre,\n                navesS\n            )\n            navesS = cambioRandom[1]\n        }\n        updateTP(player, cambioRandom[0], navesS)\n        changeEspacios(0)\n    }\n\n    const resetP = () => {\n        changeTableroP(player1.board.init)\n        changeNavesP({\n            Carrier: {},\n            Battleship: {},\n            Submarine: {},\n            Patroler: {},\n            Peque: {},\n        })\n        changeEspacios(5)\n        changeShipsLP(5)\n        changeShipsLIA(5)\n        changeShow(false)\n        changeGanador(false)\n        changeTurno('player')\n    }\n\n    const updateTP = (player, valor, naves) => {\n        if (player.name === 'Valen') {\n            changeNavesP(naves)\n            changeTableroP(valor)\n        } else {\n            changeNavesIA(naves)\n            changeTableroIA(valor)\n        }\n    }\n\n    const changeShowF = () => {\n        if (espacios === 0) {\n            randomMoves(iaplayer)\n            changeShow(!showBoth)\n        }\n    }\n\n    const cambiarTurno = () => {\n        changeTurno(prevState => (prevState === 'player' ? 'ia' : 'player'))\n    }\n\n    const sendAttack = coords => {\n        ataqueHumano(coords)\n        cambiarTurno()\n        setTimeout(() => {\n            ataqueIA()\n            cambiarTurno()\n        }, 700)\n    }\n\n    const ponerShip = coord => {\n        let nombre =\n            espacios === 5\n                ? 'Carrier'\n                : espacios === 4\n                ? 'Battleship'\n                : espacios === 3\n                ? 'Submarine'\n                : espacios === 2\n                ? 'Patroler'\n                : 'Peque'\n        let numero = espacios !== 1 ? espacios : 2\n        let cambioRandom\n        if (\n            player1.board.checkPos(\n                tableroPlayer,\n                coord - 1,\n                numero,\n                orientacion\n            ) &&\n            espacios !== 0\n        ) {\n            changeEspacios(prevState => prevState - 1)\n        }\n        cambioRandom = player1.board.placeShip(\n            tableroPlayer,\n            coord,\n            numero,\n            orientacion,\n            nombre,\n            navesPlayer\n        )\n        updateTP(player1, cambioRandom[0], cambioRandom[1])\n    }\n\n    const randomP = () => {\n        randomMoves(player1)\n    }\n\n    const cambiarOrientacion = () => {\n        changeOrientacion(prevState =>\n            prevState === 'vertical' ? 'horizontal' : 'vertical'\n        )\n    }\n\n    const ataqueHumano = coords => {\n        let ataque1 = player1.fireShip(navesIA, tableroIA, coords)\n        changeNavesIA(ataque1[0])\n        if (ataque1[1]) {\n            changeShipsLIA(prevState => {\n                if (prevState === 1) {\n                    changeTurno('Nada')\n                    changeGanador(true)\n                }\n                return prevState - 1\n            })\n        }\n        if (turnoParaMostrar === 0) {\n            changeTurnoPaMos(prevState => prevState + 1)\n        }\n        if (ataque1[2] === true) {\n            changeHited('ship')\n        } else {\n            changeHited('water')\n        }\n    }\n\n    const ataqueIA = () => {\n        let coordenadas = Math.floor(Math.random() * 100) + 1\n        while (tableroPlayer[coordenadas - 1].isHit !== false) {\n            coordenadas = Math.floor(Math.random() * 100) + 1\n        }\n        let ataque2 = iaplayer.fireShip(navesPlayer, tableroPlayer, coordenadas)\n        changeNavesP(ataque2[0])\n        if (ataque2[1]) {\n            changeShipsLP(prevState => {\n                if (prevState === 1) {\n                    changeTurno('Nada')\n                    changeGanador(true)\n                }\n                return prevState - 1\n            })\n        }\n        if (ataque2[2] === true) {\n            changeHited('ship')\n        } else {\n            changeHited('water')\n        }\n    }\n\n    return (\n        <>\n            <div className='container'>\n                {ganador ? (\n                    <div className='winnerAnnouncement'>\n                        <h2 className='textWinner'>\n                            {shipsLP === 0 ? 'The IA wins' : 'You won!'}\n                        </h2>\n                        <button className='botonP' onClick={() => resetP()}>\n                            Play Again\n                        </button>\n                    </div>\n                ) : (\n                    ''\n                )}\n                <HeadeR />\n                <BoardGenerator\n                    player1={tableroPlayer}\n                    player2={tableroIA}\n                    showAll={showBoth}\n                    turno={turno}\n                    mandarAtaque={sendAttack}\n                    iniciar={changeShowF}\n                    randomP={randomP}\n                    resetear={resetP}\n                    orientacion={orientacion}\n                    cambiarOri={cambiarOrientacion}\n                    ponerShip={ponerShip}\n                    espacios={espacios}\n                    hayGanador={ganador}\n                    puntosP={shipsLP}\n                    puntosIA={shipsLIA}\n                    turnoMostrar={turnoParaMostrar}\n                    hiten={hited}\n                />\n            </div>\n        </>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}